package com.heysteve.heygym.heycore.controller;

import com.heysteve.heygym.heycore.dao.UserDao;
import com.heysteve.heygym.heycore.model.User;
import com.heysteve.heygym.heycore.repository.UserRepository;
import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

/**
 * Created by marti on 13/5/2017.
 */
@Controller
public class UserController {

    // Private fields

    // Wire the UserDao used inside this controller.
    @Autowired
    private UserDao userDao;


    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    /**
     * Create a new user with an auto-generated id and email and name as passed
     * values.
     */
    @RequestMapping(value="/create", method = RequestMethod.POST)
    @ResponseBody
    public String create(String email, String name) {
        try {
            User user = new User(email, name);
            userDao.create(user);
        }
        catch (Exception ex) {
            return "Error creating the user: " + ex.toString();
        }
        return "User succesfully created!";
    }

    @RequestMapping(path="/add") // Map ONLY GET Requests
    public @ResponseBody String addNewUser (@RequestParam String name
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setUserName(name);
        n.setEmail(email);
        userRepository.save(n);
        return "Saved";
    }

    /**
     * Delete the user with the passed id.
     */
    @RequestMapping(value="/delete")
    @ResponseBody
    public String delete(int id) {
        try {
            User user = new User(id);
            userDao.delete(user);
        }
        catch (Exception ex) {
            return "Error deleting the user: " + ex.toString();
        }
        return "User succesfully deleted!";
    }

    /**
     * Retrieve the id for the user with the passed email address.
     */
    @RequestMapping(value="/get-by-email")
    @ResponseBody
    public String getByEmail(String email) {
        String userId;
        try {
            User user = userDao.getByEmail(email);
            userId = String.valueOf(user.getUserId());
        }
        catch (Exception ex) {

            return "User not found: " + ex.toString();
        }
        return "The user id is: " + userId;
    }

    /**
     * Update the email and the name for the user indentified by the passed id.
     */
    @RequestMapping(value="/update")
    @ResponseBody
    public String updateName(long id, String email, String name) {
        try {
            User user = userDao.getById(id);
            user.setEmail(email);
            user.setUserName(name);
            userDao.update(user);
        }
        catch (Exception ex) {
            return "Error updating the user: " + ex.toString();
        }
        return "User succesfully updated!";
    }

    @RequestMapping(value="/addCliente2")
    @ResponseBody
    public String login(String email, String password) {
        try {
            User user = userDao.getByEmail(email);
            return "redirect:altacliente.html";
        }
        catch (Exception ex) {
            return "Error updating the user: " + ex.toString();
        }
    }

    @RequestMapping(value = "/addCliente", method = RequestMethod.GET)
    public ModelAndView cliente() {
        return new ModelAndView("AltaCliente", "AltaCliente", new User());
    }

    @RequestMapping(value = "/addCliente3")
    public String cliente2(@ModelAttribute("SpringWeb")Map<String, Object> model) {
            model.put("User", new User());
            return "AltaCliente";
    }

    @RequestMapping(value = "/addUser", method = RequestMethod.POST)
    public String addStudent(@ModelAttribute("SpringWeb")User user, ModelMap model) {
        model.addAttribute("userName", user.getUserName());
        model.addAttribute("email", user.getEmail());
        return "result";
    }

    @RequestMapping("/greeting")
    public String greeting(@RequestParam(value="name", required=false, defaultValue="World") String name, Model model) {
        model.addAttribute("name", name);
        return "greeting";
    }

    @GetMapping("/greeting2")
    public String greeting(Model model) {
        model.addAttribute("user", new User());
        return "altacliente";
    }

    @PostMapping("/greeting2")
    public String greetingSubmit(@ModelAttribute User user) {
        return "result";
    }
}